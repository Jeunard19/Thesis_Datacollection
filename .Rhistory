ny.data <- data.frame(outcome, status)
table(ny.data) # this should show the same table as the one in slide 7
status <- c(rep("upper", 36), rep("middle",94), rep("lower",54))
outcome <- c(rep("r", 54),rep("3", 130))
# create the data frame
ny.data <- data.frame(outcome, status)
table(ny.data) # this should show the same table as the one in slide 7
status <- c(rep("upper", 36), rep("middle",94), rep("lower",54))
outcome <- c(rep("r", 54),rep("3", 130))
# create the data frame
ny.data <- data.frame(outcome, status)
table(ny.data) # this should show the same table as the one in slide 7
status <- c(rep("upper", 36), rep("middle",94), rep("lower",54))
outcome <- c(rep("r", 54),rep("e", 130))
# create the data frame
ny.data <- data.frame(outcome, status)
table(ny.data) # thi
status <- c(rep("upper", 36), rep("middle",94), rep("lower",54))
outcome <- c(rep("r", 30),rep("e", 6), rep("r", 20),rep("e", 74),rep("r", 4),rep("e", 50))
# create the data frame
ny.data <- data.frame(outcome, status)
table(ny.data) #
nlevels(ny.data)
levels(ny.data)
str(ny.data)
status <- c(rep("upper", 36), rep("middle",94), rep("lower",54))
outcome <- c(rep("r", 30),rep("schwa", 6), rep("r", 20),rep("schwa", 74),rep("r", 4),rep("schwa", 50))
# create the data frame
ny.data <- data.frame(outcome, status)
table(ny.data)
str(ny.data)
status <- c(rep("upper", 36), rep("middle",94), rep("lower",54))
outcome <- c(rep("r", 30),rep("schwa", 6), rep("r", 20),rep("schwa", 74),rep("r", 4),rep("schwa", 50))
# create the data frame
ny.data <- data.frame(as.factor(outcome), as.factor(status))
table(ny.data) #
str(ny.data)
status <- c(rep("upper", 36), rep("middle",94), rep("lower",54))
outcome <- c(rep("r", 30),rep("schwa", 6), rep("r", 20),rep("schwa", 74),rep("r", 4),rep("schwa", 50))
# create the data frame
ny.data <- data.frame(outcome, status)
table(ny.data)
ny.data$outcome <- as.factor(ny.data$outcome )
ny.data$status <- as.factor(ny.data$status )
str(ny.data)
ny.data$outcome <- relevel(ny.data$outcome, ref = "schwa")
levels(ny.data$outcome)
?lrm()
?lrm()packages <- c("rms", "mlogit")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())), repos='http://cran.us.r-project.org')
}
library(rms) #needed for lrm()
library(mlogit) # needed for mlogit.data() and mlogit()
lrm(outcome~status, data = ny.data)
glm(outcome~status, data = ny.data)
glm(outcome~status, data = ny.data, family = binomial)
summary(glm(outcome~status, data = ny.data, family = binomial))
rms::vif(lrm(outcome~status, data = ny.data))
30/36
36/(36+94+54)
?plogis()
0.293*0.83333
0.293
0.293* 0.833342
# create the variables
status_m <- c(rep("upper", 68), rep("middle",125), rep("lower",71))
outcome_m <- c(rep("r", 30), rep("schwa", 6), rep("both", 32),
rep("r", 20), rep("schwa", 74), rep("both", 31),
rep("r", 4), rep("schwa", 50), rep("both", 17))
# create the data frame
ny_m.data <- data.frame(outcome_m, status_m)
table(ny_m.data) # this should show the same table as the one in slide 7
str(ny_m.data)
ny_m.data$outcome_m<- as.factor(ny_m.data$outcome_m)
ny_m.data$status_m<- as.factor(ny_m.data$status_m)
str(ny_m.data)
ny_m.data$outcome_m <- relevel(ny_m.data$outcome_m, ref = "schwa")
levels(ny_m.data$outcome_m)
ny_m.data$status_m <- relevel(ny_m.data$status_m, ref = "upper")
levels(ny_m.data$status_m)
mlogit.data(ny_m.data, shape="wide", choice="prog")
library(mlogit)
install.packages(mlogit)
install.packages('mlogit')
library(mlogit)
mlogit.data(ny_m.data, shape="wide", choice="prog")
mlogit.data(ny_m.data, shape="wide", choice="outcome_m")
s<- mlogit.data(ny_m.data, shape="wide", choice="outcome_m")
multi.model <- mlogit(outcome_m ~ 1 | status_m, data = ny_mwide.data, reflevel = "schwa")
multi.model <- mlogit(outcome_m ~ 1 | status_m, data = s, reflevel = "schwa")
summary(multi.model)$coefficients
1.673971
exp(1.673971)
TranslationQuality = c(0.3735, 0.3322, 0.2196, 0.2559, 0.2485, 0.3422, 0.1611, 0.3248, 0.2978, 0.3558, 0.3255, 0.2537)
Overlap = c(0.3680, 0.3926, 0.3702, 0.3708, 0.4037, 0.3771, 0.2163, 0.3346, 0.3432, 0.4331, 0.4481, 0.3683)
library(ggplot2)
LDT <- data.frame (cbind(Overlap, TranslationQuality))
ggplot(LDT, aes(x = Overlap, y = TranslationQuality)) + geom_point(shape = 1, size =3) + stat_smooth (method = lm)
tquality = c(0.3735, 0.3322, 0.2196, 0.2259, 0.2485, 0.3422, 0.1611, 0.3248, 0.2978, 0.3558, 0.3255, 0.2537)
overlap = c(0.3680, 0.3926, 0.3702, 0.3708, 0.4037, 0.3771, 0.2163, 0.3346, 0.3432, 0.4331, 0.4481, 0.3683)
plot(tquality ~ overlap)
m <- lm(tquality ~ overlap)
abline(m)
cor.test(tquality, overlap, method = "pearson")
tquality = c(0.3735, 0.3322, 0.2196, 0.2559, 0.2485, 0.3422, 0.1611, 0.3248, 0.2978, 0.3558, 0.3255, 0.2537)
overlap = c(0.3680, 0.3926, 0.3702, 0.3708, 0.4037, 0.3771, 0.2163, 0.3346, 0.3432, 0.4331, 0.4481, 0.3683)
cor.test(tquality, overlap, method = "pearson")
plot(tquality ~ overlap)
m <- lm(tquality ~ overlap)
abline(m)
tquality = c(0.3735, 0.3322, 0.2196, 0.2259, 0.2485, 0.3422, 0.1611, 0.3248, 0.2978, 0.3558, 0.3255, 0.2537)
overlap = c(0.3680, 0.3926, 0.3702, 0.3708, 0.4037, 0.3771, 0.2163, 0.3346, 0.3432, 0.4331, 0.4481, 0.3683)
cor.test(tquality, overlap, method = "pearson")
mvnorm.etest(cbind(tquality, overlap),R = 999)
library(energy)
mvnorm.etest(cbind(tquality, overlap),R = 999)
car:;ncvTest(m)
car::ncvTest(m)
tquality = c(0.3735, 0.3322, 0.2196, 0.2559, 0.2484, 0.3422, 0.1611, 0.3248, 0.2978, 0.3558, 0.3255, 0.2537)
overlap = c(0.3680, 0.3926, 0.3702, 0.8708, 0.4037, 0.3771, 0.2163, 0.3346, 0.3432, 0.4331, 0.4481, 0.3683)
par(mfrow=c(1,2), family  = "Arial") # either of the two plots is fine
plot(tquality ~ overlap)
m <- lm(tquality ~ overlap) # this line and the next are optional as the question does not ask for the regression line
abline(m)
plot(overlap ~ tquality)
m1 <- lm(overlap ~ tquality)
abline(m1)
cor.test(overlap, tquality)
library(energy)
mvnorm.etest(cbind(overlap, tquality), R=999)
ncvTest(m)
library(car)
par(mfrow=c(1,1), family  = "Arial")
influencePlot(lm(tquality ~ overlap))
library(ggplot2)
df <- data.frame(overlap, tquality) #ggplot needs data in a dataframe
ggplot(df, aes(x=overlap, y=tquality)) + geom_point(shape=1, size=3) + stat_smooth(method = lm) + xlab("Overlap") + ylab("Translation quality") + theme(text=element_text(size=16,  family="Arial"))
status <- c(rep("upper", 36), rep("middle",94), rep("lower",54))
outcome <- c(rep("r", 30),rep("schwa", 6), rep("r", 20),rep("schwa", 74),rep("r", 4),rep("schwa", 50))
# create the data frame
ny.data <- data.frame(outcome, status)
table(ny.data) # this should show the same table as the one in slide 7
ny.data$outcome <- as.factor(ny.data$outcome)
ny.data$status <- as.factor(ny.data$status)
ny.data
levels(ny.data)
nlevels(ny.data)
nlevels(ny.data)
levels(ny.data$outcome)
relevel(ny.data$status, ref = "schwa")
relevel(ny.data$status, ref = "upper")
relevel(ny.data$outcome, ref = "schwa")
?lrm()
lrm(outcome~status, data = ny.data)
```{r 2load, message=FALSE}
rms::vif(lrm(outcome~status, data = ny.data))
relevel(ny.data$status, ref = "lower")
relevel(ny.data$outcome, ref = "schwa")
lrm(outcome~status, data = ny.data)
2.5257+-4.1352
exp( -1.6095)
lrm(outcome~status, data = ny.data)
ny.data$outcome <- as.factor(ny.data$outcome)
ny.data$status <- as.factor(ny.data$status)
relevel(ny.data$status, ref = "lower")
relevel(ny.data$outcome, ref = "schwa")
lrm(outcome~status, data = ny.data)
table(ny.data)
relevel(ny.data$status, ref = "lower")
ny.data$outcome <- as.factor(ny.data$outcome)
ny.data$status <- as.factor(ny.data$status)
ny.data$status <- relevel(ny.data$status, ref = "lower")
ny.data$outcome <-relevel(ny.data$outcome, ref = "schwa")
30/6
ny.data$outcome <- as.factor(ny.data$outcome)
ny.data$status <- as.factor(ny.data$status)
ny.data$status <- relevel(ny.data$status, ref = "lower")
ny.data$outcome <-relevel(ny.data$outcome, ref = "schwa")
lrm(outcome~status, data = ny.data)
-2.5257+ 4.1352
exp( 1.6095)
plogis(1.6095)
status_m <- c(rep("upper", 68), rep("middle",125), rep("lower",71))
outcome_m <- c(rep("r", 30), rep("schwa", 6), rep("both", 32),
rep("r", 20), rep("schwa", 74), rep("both", 31),
rep("r", 4), rep("schwa", 50), rep("both", 17))
# create the data frame
ny_m.data <- data.frame(outcome_m, status_m)
table(ny_m.data) # this should show the same table as the one in slide 7
str(ny_m.data)
ny_m.data <- data.frame(outcome_m, status_m)
table(ny_m.data) # this should show the same table as the one in slide 7
ny_m.data$outcome_m <- as.factor(ny_m.data$outcome_m )
ny_m.data$status_m <- as.factor(ny_m.data$status_m )
ny_m.data$status_m <- relevel(ny_m.data$status_m, ref = "lower")
ny_m.data$outcome_m  <-relevel(ny_m.data$outcome_m, ref = "both")
str(ny_m.data)
ny_m.data <- data.frame(outcome_m, status_m)
table(ny_m.data) # this should show the same table as the one in slide 7
ny_m.data$outcome_m <- as.factor(ny_m.data$outcome_m )
ny_m.data$status_m <- as.factor(ny_m.data$status_m )
ny_m.data$status_m <- relevel(ny_m.data$status_m, ref = "upper")
ny_m.data$outcome_m  <-relevel(ny_m.data$outcome_m, ref = "both")
str(ny_m.data)
library(mlogit) # package for multinomial logistic regression
multi1.df <- mlogit.data(ny_m.data, shape="wide", choice="prog") # prepare data for mlogit
multi.lm <- mlogit(outcome_m ~ 1 | status_m , data=ny_m.data)
multi.lm <- mlogit(outcome_m ~ 1 | status_m , data=ny_m.data, reflevel=3)
multi1.df <- mlogit.data(ny_m.data, shape="wide", choice="outc
[]
]
?
)
''
.
""
""
multi1.df <- mlogit.data(ny_m.data, shape="wide", choice="outcome_m")
multi.lm <- mlogit(outcome_m ~ 1 | status_m , data=ny_m.data)
multi.lm <- mlogit(outcome_m ~ 1 | status_m , data=multi1.df)
summary(multi.lm)$coefficients
exp( -1.67397100   )
ny_m.data$outcome_m <- as.factor(ny_m.data$outcome_m )
ny_m.data$status_m <- as.factor(ny_m.data$status_m )
ny_m.data$status_m <- relevel(ny_m.data$status_m, ref = "upper")
ny_m.data$outcome_m  <-relevel(ny_m.data$outcome_m, ref = "both")
library(mlogit) # package for multinomial logistic regression
multi1.df <- mlogit.data(ny_m.data, shape="wide", choice="outcome_m") # prepare data for mlogit
multi.lm <- mlogit(outcome_m ~ 1 | status_m , data=multi1.df)
summary(multi.lm)$coefficients
ny_m.data <- data.frame(outcome_m, status_m)
table(ny_m.data) # this should show the same table as the one in slide 7
ny_m.data$outcome_m <- as.factor(ny_m.data$outcome_m )
ny_m.data$status_m <- as.factor(ny_m.data$status_m )
ny_m.data$status_m <- relevel(ny_m.data$status_m, ref = "upper")
ny_m.data$outcome_m  <-relevel(ny_m.data$outcome_m, ref = "schwa")
library(mlogit) # package for multinomial logistic regression
multi1.df <- mlogit.data(ny_m.data, shape="wide", choice="outcome_m") # prepare data for mlogit
multi.lm <- mlogit(outcome_m ~ 1 | status_m , data=multi1.df,reflevel = "schwa")
summary(multi.lm)$coefficients
exp( 1.67397100   )
# create the variables
status <- c(rep("upper", 36), rep("middle",94), rep("lower",54))
outcome <- c(rep("r", 30),rep("schwa", 6), rep("r", 20),rep("schwa", 74),rep("r", 4),rep("schwa", 50))
# create the data frame
ny.data <- data.frame(outcome, status)
table(ny.data)
remove.packages("rlang")
library(mlogit)
library(mlogit)
remove.packages("rlang")
multi1.df <- mlogit.data(ny_m.data, shape="wide", choice="outcome_m") # prepare
install.packages(rlang)
install.packages('rlang')
install.packages("rlang")
library(mlogit)
install.packages("rlang")
install.packages('rlang')
install.packages(rlang)
library(mlogit)
library(mlogit)
install.packages('rlang')
library(mlogit)
setwd("Flask")
P1<-read.csv("data_P1_final.csv")
P2<-read.csv("data_P2_final.csv")
P1<-read.csv("data_P1_TpR.csv")
P2<-read.csv("data_P2_TpR.csv")
head(P1)
head(P2)
setwd("Flask")
P1<-read.csv("data_P1_TpR.csv")
P2<-read.csv("data_P2_TpR.csv")
head(P1)
head(P2)
P1_normal <- P1[P1$Condtion=="normal",]
P1_normal <- P1[P1$Condtion=="modified",]
P2_normal <- P2[P2$Condtion=="normal",]
P2_modified<- P2[P2$Condtion=="modified",]
P1_normal
library(reshape2)
df_melted <- melt(df, id.vars=c("Condition"))
df_melted
df_melted
df_melted <- melt(P1, id.vars=c("Condition"))
P1
head(P1)
df_melted <- melt(P1, id.vars=c("Condition"))
ggplot(data=P1, aes(x=Game, y=Time, color=Condtion)) +
geom_point(position=position_dodge(width=0.3))
library(reshape2)
ggplot(data=P1, aes(x=Game, y=Time, color=Condtion)) +
geom_point(position=position_dodge(width=0.3))
library(ggplot2)
ggplot(data=P1, aes(x=Game, y=Time, color=Condtion)) +
geom_point(position=position_dodge(width=0.3))
ggplot(data=P2, aes(x=Game, y=Time, color=Condtion)) +
geom_point(position=position_dodge(width=0.5))
ggplot(data=P2, aes(x=Game, y=Time, color=Condtion)) +
geom_point(position=position_dodge(width=0.3))
head(P1)
head(P2)
P1_sd<-read.csv("data_P1_SD.csv")
P2_sd<-read.csv("data_P2_SD.csv")
head(P1_sd)
head(P1_sd)
P_sd = rbind(P1_sd, P2_sd)
P_sd
ggplot(data=P_sd, aes(x=Game, y=X, color=Condtion)) +
geom_point(position=position_dodge(width=0.3))
ggplot(data=P_sd, aes(x=Game, y=Y, color=Condtion)) +
geom_point(position=position_dodge(width=0.3))
ggplot(data=P_sd, aes(x=Game, y=Z, color=Condtion)) +
geom_point(position=position_dodge(width=0.3))
head(P1_sd)
head(P1_sd)
P1_sd<-read.csv("data_P1_SD.csv")
P2_sd<-read.csv("data_P2_SD.csv")
head(P1_sd)
head(P1_sd)
P_sd = rbind(P1_sd, P2_sd)
P1_sd<-read.csv("data_P1_SD.csv")
P2_sd<-read.csv("data_P2_SD.csv")
head(P1_sd)
head(P1_sd)
P_sd = rbind(P1_sd, P2_sd)
P2_sd<-read.csv("data_P2_SD.csv")
head(P2_sd)
P1_sd<-read.csv("data_P1_SD.csv")
P2_sd<-read.csv("data_P2_SD.csv")
head(P1_sd)
head(P2_sd)
P_sd = rbind(P1_sd, P2_sd)
P_sd = P_sd[P_sd$Role == "director",]
ggplot(data=P_sd, aes(x=Game, y=X, color=Condtion)) +
geom_point(position=position_dodge(width=0.3))
ggplot(data=P_sd, aes(x=Game, y=Y, color=Condtion)) +
geom_point(position=position_dodge(width=0.3))
ggplot(data=P_sd, aes(x=Game, y=Z, color=Condtion)) +
geom_point(position=position_dodge(width=0.3))
1_sd<-read.csv("data_P1_SD.csv")
P1_sd<-read.csv("data_P1_SD.csv")
P2_sd<-read.csv("data_P2_SD.csv")
head(P1_sd)
head(P2_sd)
P_sd = rbind(P1_sd, P2_sd)
P_sd = P_sd[P_sd$Role == "director",]
ggplot(data=P_sd, aes(x=Game, y=X, color=Condtion)) +
geom_point(position=position_dodge(width=0.3))
ggplot(data=P_sd, aes(x=Game, y=Y, color=Condtion)) +
geom_point(position=position_dodge(width=0.3))
ggplot(data=P_sd, aes(x=Game, y=Z, color=Condtion)) +
geom_point(position=position_dodge(width=0.3))
P1_sd<-read.csv("data_P1_SD.csv")
P2_sd<-read.csv("data_P2_SD.csv")
head(P1_sd)
head(P2_sd)
ggplot(data=P2_sd, aes(x=Game, y=Succes, color=Condtion)) +
geom_point(position=position_dodge(width=0.3))
cdplot(Species ~ Sepal.Width, data=iris)
cdplot(Succes ~ Game, data=P2_sd)
P2_sd_norm = P2_sd[P2_sd$Condtion == "normal",]
P2_sd_nmod = P2_sd[P2_sd$Condtion == "modified",]
P2_sd_norm$Succes <- as.factor(P2_sd_norm$Succes )
P2_sd_nmod$Succes <- as.factor(P2_sd_nmod$Succes )
P2_sd_nmod$Succes
cdplot(Succes ~ Game, data=P2_sd)
cdplot(Succes ~ Game, data=P2_sd_nmod)
cdplot(Succes ~ Game, data=P2_sd_norm)
P2_sd_norm = P_sd[P_sd$Condtion == "normal",]
P2_sd_nmod = P_sd[P_sd$Condtion == "modified",]
P2_sd_norm$Succes <- as.factor(P2_sd_norm$Succes )
P2_sd_norm = P_sd[P_sd$Condtion == "normal",]
P2_sd_nmod = P_sd[P_sd$Condtion == "modified",]
P2_sd_nmod
P2_sd_norm
P2_sd_norm$Succes <- as.factor(P2_sd_norm$Succes )
head(P1_sd)
head(P2_sd)
P_sd = rbind(P1_sd, P2_sd)
# SD
P1_sd<-read.csv("data_P1_SD.csv")
P2_sd<-read.csv("data_P2_SD.csv")
head(P1_sd)
head(P2_sd)
P_sd = rbind(P1_sd, P2_sd)
P1_sd<-read.csv("data_P1_SD.csv")
P2_sd<-read.csv("data_P2_SD.csv")
head(P1_sd)
head(P2_sd)
P_sd = rbind(P1_sd, P2_sd)
P_sd = rbind(P1_sd, P2_sd)
P1_sd<-read.csv("data_P1_SD.csv")
P2_sd<-read.csv("data_P2_SD.csv")
head(P1_sd)
head(P2_sd)
P_sd = rbind(P1_sd, P2_sd)
P2_sd_norm = P_sd[P_sd$Condtion == "normal",]
P2_sd_nmod = P_sd[P_sd$Condtion == "modified",]
P2_sd_norm$Succes <- as.factor(P2_sd_norm$Succes )
P2_sd_nmod$Succes <- as.factor(P2_sd_nmod$Succes )
cdplot(Succes ~ Game, data=P2_sd_nmod)
cdplot(Succes ~ Game, data=P2_sd_norm)
library(beeswarm)
install.packages("beeswarm")
head(P2_sd_nmod)
beeswarm(P2_sd_nmod$Succes ~ P2_sd_nmod$Game,
pch = 19)
library(beeswarm)
beeswarm(P2_sd_nmod$Succes ~ P2_sd_nmod$Game,
pch = 19)
beeswarm(P2_sd_nmod$Game ~ P2_sd_nmod$Succes,
pch = 19)
beeswarm(Game~ Succes,
pch = 19)
Game <- P2_sd_nmod$Game
Succes <- P2_sd_nmod$Succes
beeswarm(Game~ Succes,
pch = 19)
Game <- P2_sd_norm$Game
Succes <- P2_sd_norm$Succes
beeswarm(Game~ Succes,
pch = 19)
Game <- P2_sd_norm$Game
Succes <- P2_sd_norm$Succes
beeswarm(Game~ Succes,
pch = 29)
Game <- P2_sd_norm$Game
Succes <- P2_sd_norm$Succes
beeswarm(Game~ Succes,
pch = 9)
Game <- P2_sd_norm$Game
Succes <- P2_sd_norm$Succes
beeswarm(Game~ Succes,
pch = 20)
?beanplot
??beanplot
install.packages("beanplot")
??beanplot
library(beanplot)
??beanplot
beanplot(rnorm(100), runif(100))
rnorm(100)
runif(100))
runif(100)
beanplot(P2_sd_norm$Game[P2_sd_norm$Succes == 1], P2_sd_norm$Game[P2_sd_norm$Succes == 0])
beanplot(rnorm(100), runif(100))
?beanplot
beanplot(Succes~Game,data = P2_sd_norm)
beanplot(Game~Succes,data = P2_sd_norm)
beanplot(Game~Succes,data = P2_sd_norm,xlab = "Success")
beanplot(Game~Succes,data = P2_sd_norm,xlab = "Success",ylab = "Game")
cdplot(Succes ~ Game, data=P2_sd_nmod)
cdplot(Succes ~ Game, data=P2_sd_norm)
P1_sd<-read.csv("data_P1_SD.csv")
P2_sd<-read.csv("data_P2_SD.csv")
P1<-read.csv("data_P1_TpR.csv")
P2<-read.csv("data_P2_TpR.csv")
P1<-read.csv("data_P1_TpR.csv")
P2<-read.csv("data_P2_TpR.csv")
head(P1)
head(P2)
?cdplot
P1_normal <- P1[P1$Condtion=="normal",]
P1_modified<- P1[P1$Condtion=="modified",]
P2_normal <- P2[P2$Condtion=="normal",]
P2_modified<- P2[P2$Condtion=="modified",]
normal<-P1_normal$Time
modified<-P1_modified$Time
ggplot(data=P1, aes(x=Game, y=Time, color=Condtion)) +
geom_point(position=position_dodge(width=0.3))
ggplot(data=P2, aes(x=Game, y=Time, color=Condtion)) +
geom_point(position=position_dodge(width=0.3))
ggplot(data=P1, aes(x=Game, y=Time, color=Condtion)) +
geom_point(position=position_dodge(width=0.3))
ggplot(data=P1_normal, aes(x=Game, y=Time, color=Condtion)) +
geom_point(position=position_dodge(width=0.3))
ggplot(data=P1_modified, aes(x=Game, y=Time, color=Condtion)) +
geom_point(position=position_dodge(width=0.3))
ggplot(data=P1, aes(x=Game, y=Time, color=Condtion)) +
geom_point(position=position_dodge(width=0.3))
P1_sd<-read.csv("data_P1_SD.csv")
P2_sd<-read.csv("data_P2_SD.csv")
head(P1_sd)
head(P2_sd)
P_sd = rbind(P1_sd, P2_sd)
P_sd = P_sd[P_sd$Role == "director",]
ggplot(data=P_sd, aes(x=Game, y=X, color=Condtion)) +
geom_point(position=position_dodge(width=0.3))
ggplot(data=P_sd, aes(x=Game, y=Y, color=Condtion)) +
geom_point(position=position_dodge(width=0.3))
ggplot(data=P_sd, aes(x=Game, y=Z, color=Condtion)) +
geom_point(position=position_dodge(width=0.3))
ggplot(data=P_sd, aes(x=Game, y=X, color=Condtion)) +
geom_point(position=position_dodge(width=0.3))
ggplot(data=P_sd, aes(x=Game, y=Z, color=Condtion)) +
geom_point(position=position_dodge(width=0.3))
ggplot(data=P_sd, aes(x=Game, y=Y, color=Condtion)) +
geom_point(position=position_dodge(width=0.3))
P_sd = rbind(P1_sd, P2_sd)
P_sd = P_sd[P_sd$Role == "director",]
ggplot(data=P_sd, aes(x=Game, y=Y, color=Condtion)) +
geom_point(position=position_dodge(width=0.3))
ggplot(data=P_sd, aes(x=Game, y=X, color=Condtion)) +
geom_point(position=position_dodge(width=0.3))
ggplot(data=P_sd, aes(x=Game, y=Y, color=Condtion)) +
geom_point(position=position_dodge(width=0.3))
ggplot(data=P_sd, aes(x=Game, y=Z, color=Condtion)) +
geom_point(position=position_dodge(width=0.3))
cdplot(Succes ~ Game, data=P2_sd_nmod)
cdplot(Succes ~ Game, data=P2_sd_norm)
